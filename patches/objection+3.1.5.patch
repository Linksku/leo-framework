diff --git a/node_modules/objection/typings/objection/index.d.ts b/node_modules/objection/typings/objection/index.d.ts
index e0cf7d8..ff6cc0b 100644
--- a/node_modules/objection/typings/objection/index.d.ts
+++ b/node_modules/objection/typings/objection/index.d.ts
@@ -120,7 +120,7 @@ declare namespace Objection {
   type Raw = RawBuilder | Knex.Raw;
   type Operator = string;
   type ColumnRef = string | Raw | ReferenceBuilder;
-  type TableRef<QB extends AnyQueryBuilder> = ColumnRef | AnyQueryBuilder | CallbackVoid<QB>;
+  type TableRef<QB extends AnyQueryBuilder> = ColumnRef | AnyQueryBuilder | (<T extends QB>(cb: T) => T);
 
   type PrimitiveValue =
     | string
@@ -149,10 +149,6 @@ declare namespace Objection {
     [key: string]: PrimitiveValue;
   }
 
-  interface CallbackVoid<T> {
-    (this: T, arg: T): void;
-  }
-
   type Identity<T> = (value: T) => T;
   type AnyQueryBuilder = QueryBuilder<any, any>;
   type AnyModelConstructor = ModelConstructor<Model>;
@@ -179,7 +175,9 @@ declare namespace Objection {
   /**
    * Type for keys of non-function properties of T.
    */
-  type NonFunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T];
+  type NonFunctionPropertyNames<T> = T extends any
+    ? { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
+    : never;
 
   /**
    * Type that attempts to only select the user-defined model properties.
@@ -194,20 +192,12 @@ declare namespace Objection {
   /**
    * A Pojo version of model.
    */
-  type ModelObject<T extends Model> = Pick<T, DataPropertyNames<T>>;
+  type ModelObject<T extends Model> = T['cls']['Interface'];
 
   /**
    * Any object that has some of the properties of model class T match this type.
    */
-  type PartialModelObject<T extends Model> = {
-    [K in DataPropertyNames<T>]?: Defined<T[K]> extends Model
-      ? T[K]
-      : Defined<T[K]> extends Array<infer I>
-        ? I extends Model
-          ? I[]
-          : Expression<T[K]>
-        : Expression<T[K]>;
-  };
+  type PartialModelObject<T extends Model> = Partial<T['cls']['Interface']>;
 
   /**
    * Additional optional parameters that may be used in graphs.
@@ -241,7 +231,7 @@ declare namespace Objection {
   /**
    * Extracts the property names (excluding relations) of a model class.
    */
-  type ModelProps<T extends Model> = Exclude<
+  type ModelProps<T extends Model> = T extends any ? Exclude<
     {
       [K in keyof T]?: Defined<T[K]> extends Model
         ? never
@@ -254,7 +244,7 @@ declare namespace Objection {
             : K;
     }[keyof T],
     undefined | 'QueryBuilderType'
-  >;
+  > : never;
 
   /**
    * Extracts the relation names of the a model class.
@@ -347,7 +337,7 @@ declare namespace Objection {
 
   type JsonObjectOrFieldExpression = object | object[] | FieldExpression;
 
-  type Selection<QB extends AnyQueryBuilder> = ColumnRef | AnyQueryBuilder | CallbackVoid<QB>;
+  type Selection<QB extends AnyQueryBuilder> = ColumnRef | AnyQueryBuilder | (<T extends QB>(cb: T) => T);
 
   interface SelectMethod<QB extends AnyQueryBuilder> {
     // These must come first so that we get autocomplete.
@@ -436,7 +426,7 @@ declare namespace Objection {
     (col: ColumnRef, expr: Expression<PrimitiveValue>): QB;
 
     (condition: boolean): QB;
-    (cb: CallbackVoid<QB>): QB;
+    (cb: <T extends QB>(cb: T) => T): QB;
     (raw: Raw): QB;
     <QBA extends AnyQueryBuilder>(qb: QBA): QB;
 
@@ -450,11 +440,11 @@ declare namespace Objection {
   interface WhereRawMethod<QB extends AnyQueryBuilder> extends RawInterface<QB> {}
 
   interface WhereWrappedMethod<QB extends AnyQueryBuilder> {
-    (cb: CallbackVoid<QB>): QB;
+    (cb: <T extends QB>(cb: T) => T): QB;
   }
 
   interface WhereExistsMethod<QB extends AnyQueryBuilder> {
-    (cb: CallbackVoid<QB>): QB;
+    (cb: <T extends QB>(cb: T) => T): QB;
     (raw: Raw): QB;
     <QBA extends AnyQueryBuilder>(qb: QBA): QB;
   }
@@ -462,11 +452,11 @@ declare namespace Objection {
   interface WhereInMethod<QB extends AnyQueryBuilder> {
     // These must come first so that we get autocomplete.
     <QBP extends QB>(col: ModelProps<ModelType<QBP>>, expr: Expression<PrimitiveValue>): QB;
-    <QBP extends QB>(col: ModelProps<ModelType<QBP>>, cb: CallbackVoid<QB>): QB;
+    <QBP extends QB>(col: ModelProps<ModelType<QBP>>, cb: <T extends QB>(cb: T) => T): QB;
     <QBP extends QB>(col: ModelProps<ModelType<QBP>>, qb: AnyQueryBuilder): QB;
 
     (col: ColumnRef | ColumnRef[], expr: readonly Expression<PrimitiveValue>[]): QB;
-    (col: ColumnRef | ColumnRef[], cb: CallbackVoid<QB>): QB;
+    (col: ColumnRef | ColumnRef[], cb: <T extends QB>(cb: T) => T): QB;
     (col: ColumnRef | ColumnRef[], qb: AnyQueryBuilder): QB;
   }
 
@@ -544,7 +534,7 @@ declare namespace Objection {
     (column: ColumnRef[], qb: AnyQueryBuilder): QB;
   }
 
-  type QBOrCallback<QB extends AnyQueryBuilder> = AnyQueryBuilder | CallbackVoid<QB>;
+  type QBOrCallback<QB extends AnyQueryBuilder> = AnyQueryBuilder | (<T extends QB>(cb: T) => T);
 
   interface BaseSetOperations<QB extends AnyQueryBuilder> {
     (callbackOrBuilder: QBOrCallback<QB>, wrap?: boolean): QB;
@@ -596,7 +586,7 @@ declare namespace Objection {
   }
 
   interface WithMethod<QB extends AnyQueryBuilder> {
-    (alias: string, expr: CallbackVoid<QB> | AnyQueryBuilder | Raw): QB;
+    (alias: string, expr: ((cb: T) => T) | AnyQueryBuilder | Raw): QB;
   }
 
   interface JoinRelatedOptions {
@@ -611,8 +601,9 @@ declare namespace Objection {
   interface JoinMethod<QB extends AnyQueryBuilder> {
     (table: TableRef<QB>, leftCol: ColumnRef, op: Operator, rightCol: ColumnRef): QB;
     (table: TableRef<QB>, leftCol: ColumnRef, rightCol: ColumnRef): QB;
-    (table: TableRef<QB>, cb: CallbackVoid<Knex.JoinClause>): QB;
+    (table: TableRef<QB>, cb: (cb: Knex.JoinClause) => Knex.JoinClause): QB;
     (table: TableRef<QB>, raw: Raw): QB;
+    (table: TableRef<QB>, columns: Record<string, ColumnRef>): QB;
     (raw: Raw): QB;
   }
 
@@ -624,6 +615,7 @@ declare namespace Objection {
 
   interface AggregateMethod<QB extends AnyQueryBuilder> {
     (column: ColumnRef): QB;
+    (columns: Record<string, ColumnRef>): QB;
   }
 
   interface CountMethod<QB extends AnyQueryBuilder> {
@@ -741,7 +733,7 @@ declare namespace Objection {
   }
 
   interface OnBuildMethod<QB extends AnyQueryBuilder> {
-    (cb: CallbackVoid<QB>): QB;
+    (cb: <T extends QB>(cb: T) => T): QB;
   }
 
   interface OnBuildKnexCallback<QB extends AnyQueryBuilder> {
@@ -1000,15 +992,6 @@ declare namespace Objection {
     withMaterialized: WithMethod<this>;
     withNotMaterialized: WithMethod<this>;
 
-    joinRelated: JoinRelatedMethod<this>;
-    innerJoinRelated: JoinRelatedMethod<this>;
-    outerJoinRelated: JoinRelatedMethod<this>;
-    leftJoinRelated: JoinRelatedMethod<this>;
-    leftOuterJoinRelated: JoinRelatedMethod<this>;
-    rightJoinRelated: JoinRelatedMethod<this>;
-    rightOuterJoinRelated: JoinRelatedMethod<this>;
-    fullOuterJoinRelated: JoinRelatedMethod<this>;
-
     join: JoinMethod<this>;
     joinRaw: JoinRawMethod<this>;
     innerJoin: JoinMethod<this>;
@@ -1078,18 +1061,9 @@ declare namespace Objection {
     insertAndFetch(insert: PartialModelObject<M>[]): ArrayQueryBuilder<this>;
     insertAndFetch(): SingleQueryBuilder<this>;
 
-    relate(
-      ids: MaybeCompositeId | MaybeCompositeId[] | PartialModelObject<M> | PartialModelObject<M>[],
-    ): NumberQueryBuilder<this>;
-
-    unrelate(): NumberQueryBuilder<this>;
     for(ids: ForIdValue | ForIdValue[]): this;
 
-    withGraphFetched(expr: RelationExpression<M>, options?: GraphOptions): this;
-    withGraphJoined(expr: RelationExpression<M>, options?: GraphOptions): this;
-
     truncate(): Promise<void>;
-    allowGraph: AllowGraphMethod<this>;
 
     throwIfNotFound: (
       arg?: any,
@@ -1135,16 +1109,6 @@ declare namespace Objection {
     onBuildKnex: OnBuildKnexMethod<this>;
     onError: OnErrorMethod<this>;
 
-    insertGraph: InsertGraphMethod<M>;
-    insertGraphAndFetch: InsertGraphMethod<M>;
-
-    upsertGraph: UpsertGraphMethod<M>;
-    upsertGraphAndFetch: UpsertGraphMethod<M>;
-
-    graphExpressionObject: GraphExpressionObjectMethod<this>;
-
-    modifyGraph: ModifyGraphMethod<this>;
-
     context: ContextMethod<this>;
     clearContext: ClearContextMethod<this>;
 
@@ -1156,12 +1120,9 @@ declare namespace Objection {
     isInsert: BooleanReturningMethod;
     isUpdate: BooleanReturningMethod;
     isDelete: BooleanReturningMethod;
-    isRelate: BooleanReturningMethod;
-    isUnrelate: BooleanReturningMethod;
     isInternal: BooleanReturningMethod;
     hasWheres: BooleanReturningMethod;
     hasSelects: BooleanReturningMethod;
-    hasWithGraph: BooleanReturningMethod;
 
     has: HasMethod;
     clear: ClearMethod<this>;
@@ -1169,8 +1130,6 @@ declare namespace Objection {
     clearSelect: IdentityMethod<this>;
     clearOrder: IdentityMethod<this>;
     clearWhere: IdentityMethod<this>;
-    clearWithGraph: IdentityMethod<this>;
-    clearAllowGraph: IdentityMethod<this>;
 
     ModelType: M;
     ResultType: R;
@@ -1210,7 +1169,6 @@ declare namespace Objection {
     cancelQuery: CancelQueryThunk;
     context: QueryContext;
     transaction: TransactionOrKnex;
-    relation?: Relation;
     modelOptions?: ModelOptions;
     items: Model[];
     inputItems: M[];
@@ -1444,7 +1402,6 @@ declare namespace Objection {
     tableName: string;
     idColumn: string | string[];
     jsonSchema: JSONSchema;
-    relationMappings: RelationMappings | RelationMappingsThunk;
     modelPaths: string[];
     jsonAttributes: string[];
     virtualAttributes: string[];
@@ -1453,8 +1410,6 @@ declare namespace Objection {
     dbRefProp: string;
     propRefRegex: RegExp;
     pickJsonSchemaProperties: boolean;
-    relatedFindQueryMutates: boolean;
-    relatedInsertQueryMutates: boolean;
     useLimitInFirst: boolean;
     modifiers: Modifiers;
     columnNameMappers: ColumnNameMappers;
@@ -1463,25 +1418,7 @@ declare namespace Objection {
     ref: ReferenceFunction;
     fn: FunctionFunction;
 
-    BelongsToOneRelation: RelationType;
-    HasOneRelation: RelationType;
-    HasManyRelation: RelationType;
-    ManyToManyRelation: RelationType;
-    HasOneThroughRelation: RelationType;
-
-    defaultGraphOptions?: GraphOptions;
-
-    query(this: Constructor<M>, trxOrKnex?: TransactionOrKnex): QueryBuilderType<M>;
-
-    relatedQuery<K extends keyof M>(
-      relationName: K,
-      trxOrKnex?: TransactionOrKnex,
-    ): ArrayRelatedQueryBuilder<M[K]>;
-
-    relatedQuery<RM extends Model>(
-      relationName: string,
-      trxOrKnex?: TransactionOrKnex,
-    ): QueryBuilderType<RM>;
+    // query(this: Constructor<M>, trxOrKnex?: TransactionOrKnex): QueryBuilderType<M>;
 
     fromJson(json: object, opt?: ModelOptions): M;
     fromDatabaseJson(json: object): M;
@@ -1500,43 +1437,9 @@ declare namespace Objection {
     knexQuery(): Knex.QueryBuilder;
     startTransaction(knexOrTransaction?: TransactionOrKnex): Promise<Transaction>;
 
-    transaction<T>(callback: (trx: Transaction) => Promise<T>): Promise<T>;
-    transaction<T>(
-      trxOrKnex: TransactionOrKnex,
-      callback: (trx: Transaction) => Promise<T>,
-    ): Promise<T>;
-
     bindKnex(trxOrKnex: TransactionOrKnex): this;
     bindTransaction(trxOrKnex: TransactionOrKnex): this;
 
-    fetchGraph(
-      modelOrObject: PartialModelObject<M>,
-      expression: RelationExpression<M>,
-      options?: FetchGraphOptions,
-    ): SingleQueryBuilder<QueryBuilderType<M>>;
-
-    fetchGraph(
-      modelOrObject: PartialModelObject<M>[],
-      expression: RelationExpression<M>,
-      options?: FetchGraphOptions,
-    ): QueryBuilderType<M>;
-
-    getRelations(): Relations;
-    getRelation(name: string): Relation;
-
-    traverse(models: Model | Model[], traverser: TraverserFunction): void;
-    traverse(
-      filterConstructor: ModelConstructor<Model>,
-      models: Model | Model[],
-      traverser: TraverserFunction,
-    ): void;
-    traverseAsync(models: Model | Model[], traverser: TraverserFunction): Promise<void>;
-    traverseAsync(
-      filterConstructor: ModelConstructor<Model>,
-      models: Model | Model[],
-      traverser: TraverserFunction,
-    ): Promise<void>;
-
     beforeFind(args: StaticHookArguments<any>): any;
     afterFind(args: StaticHookArguments<any>): any;
     beforeInsert(args: StaticHookArguments<any>): any;
@@ -1553,7 +1456,6 @@ declare namespace Objection {
     static tableName: string;
     static idColumn: string | string[];
     static jsonSchema: JSONSchema;
-    static relationMappings: RelationMappings | RelationMappingsThunk;
     static modelPaths: string[];
     static jsonAttributes: string[];
     static virtualAttributes: string[];
@@ -1562,8 +1464,6 @@ declare namespace Objection {
     static dbRefProp: string;
     static propRefRegex: RegExp;
     static pickJsonSchemaProperties: boolean;
-    static relatedFindQueryMutates: boolean;
-    static relatedInsertQueryMutates: boolean;
     static useLimitInFirst: boolean;
     static modifiers: Modifiers;
     static columnNameMappers: ColumnNameMappers;
@@ -1572,30 +1472,6 @@ declare namespace Objection {
     static ref: ReferenceFunction;
     static fn: FunctionFunction;
 
-    static BelongsToOneRelation: RelationType;
-    static HasOneRelation: RelationType;
-    static HasManyRelation: RelationType;
-    static ManyToManyRelation: RelationType;
-    static HasOneThroughRelation: RelationType;
-
-    static defaultGraphOptions?: GraphOptions;
-
-    static query<M extends Model>(
-      this: Constructor<M>,
-      trxOrKnex?: TransactionOrKnex,
-    ): QueryBuilderType<M>;
-
-    static relatedQuery<M extends Model, K extends keyof M>(
-      this: ConstructorType<M>,
-      relationName: K,
-      trxOrKnex?: TransactionOrKnex,
-    ): ArrayRelatedQueryBuilder<M[K]>;
-
-    static relatedQuery<RM extends Model>(
-      relationName: string,
-      trxOrKnex?: TransactionOrKnex,
-    ): QueryBuilderType<RM>;
-
     static fromJson<M extends Model>(this: Constructor<M>, json: object, opt?: ModelOptions): M;
     static fromDatabaseJson<M extends Model>(this: Constructor<M>, json: object): M;
 
@@ -1613,45 +1489,9 @@ declare namespace Objection {
     static knexQuery(): Knex.QueryBuilder;
     static startTransaction(knexOrTransaction?: TransactionOrKnex): Promise<Transaction>;
 
-    static transaction<T>(callback: (trx: Transaction) => Promise<T>): Promise<T>;
-    static transaction<T>(
-      trxOrKnex: TransactionOrKnex | undefined,
-      callback: (trx: Transaction) => Promise<T>,
-    ): Promise<T>;
-
     static bindKnex<M>(this: M, trxOrKnex: TransactionOrKnex): M;
     static bindTransaction<M>(this: M, trxOrKnex: TransactionOrKnex): M;
 
-    static fetchGraph<M extends Model>(
-      this: Constructor<M>,
-      modelOrObject: PartialModelObject<M>,
-      expression: RelationExpression<M>,
-      options?: FetchGraphOptions,
-    ): SingleQueryBuilder<QueryBuilderType<M>>;
-
-    static fetchGraph<M extends Model>(
-      this: Constructor<M>,
-      modelOrObject: PartialModelObject<M>[],
-      expression: RelationExpression<M>,
-      options?: FetchGraphOptions,
-    ): QueryBuilderType<M>;
-
-    static getRelations(): Relations;
-    static getRelation(name: string): Relation;
-
-    static traverse(models: Model | Model[], traverser: TraverserFunction): void;
-    static traverse(
-      filterConstructor: typeof Model,
-      models: Model | Model[],
-      traverser: TraverserFunction,
-    ): void;
-    static traverseAsync(models: Model | Model[], traverser: TraverserFunction): Promise<void>;
-    static traverseAsync(
-      filterConstructor: typeof Model,
-      models: Model | Model[],
-      traverser: TraverserFunction,
-    ): Promise<void>;
-
     static beforeFind(args: StaticHookArguments<any>): any;
     static afterFind(args: StaticHookArguments<any>): any;
     static beforeInsert(args: StaticHookArguments<any>): any;
@@ -1663,26 +1503,11 @@ declare namespace Objection {
 
     $modelClass: ModelClass<this>;
 
-    $relatedQuery<K extends keyof this>(
-      relationName: K,
-      trxOrKnex?: TransactionOrKnex,
-    ): RelatedQueryBuilder<this[K]>;
-
-    $relatedQuery<RM extends Model>(
-      relationName: string,
-      trxOrKnex?: TransactionOrKnex,
-    ): QueryBuilderType<RM>;
-
-    $query(trxOrKnex?: TransactionOrKnex): SingleQueryBuilder<QueryBuilderType<this>>;
+    // $query(trxOrKnex?: TransactionOrKnex): SingleQueryBuilder<QueryBuilderType<this>>;
 
     $id(id: any): void;
     $id(): any;
 
-    $fetchGraph(
-      expression: RelationExpression<this>,
-      options?: FetchGraphOptions,
-    ): SingleQueryBuilder<QueryBuilderType<this>>;
-
     $formatDatabaseJson(json: Pojo): Pojo;
     $parseDatabaseJson(json: Pojo): Pojo;
 
@@ -1708,22 +1533,8 @@ declare namespace Objection {
     $setJson(json: object, opt?: ModelOptions): this;
     $setDatabaseJson(json: object): this;
 
-    $setRelated<RM extends Model>(
-      relation: String | Relation,
-      related: RM | RM[] | null | undefined,
-    ): this;
-
-    $appendRelated<RM extends Model>(
-      relation: String | Relation,
-      related: RM | RM[] | null | undefined,
-    ): this;
-
     $set(obj: Pojo): this;
     $clone(opt?: CloneOptions): this;
-    $traverse(filterConstructor: typeof Model, traverser: TraverserFunction): this;
-    $traverse(traverser: TraverserFunction): this;
-    $traverseAsync(filterConstructor: typeof Model, traverser: TraverserFunction): Promise<this>;
-    $traverseAsync(traverser: TraverserFunction): Promise<this>;
     $omitFromJson(keys: string | string[] | { [key: string]: boolean }): this;
     $omitFromDatabaseJson(keys: string | string[] | { [key: string]: boolean }): this;
 
